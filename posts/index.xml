<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jaswine</title>
    <link>https://jaswine.com/blog/posts/</link>
    <description>Recent content in Posts on Jaswine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 07 Sep 2020 11:15:23 +0800</lastBuildDate>
    
	<atom:link href="https://jaswine.com/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「🔨实践」分布式事务方案-最大努力通知</title>
      <link>https://jaswine.com/blog/posts/practice/trans_rocketmq-copy/</link>
      <pubDate>Mon, 07 Sep 2020 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/trans_rocketmq-copy/</guid>
      <description>&lt;p&gt;分布式系统中，消息队列是必不可不少的中间件，实现服务之间的异步调用，分布式系统中存在分布式事务的问题，除了RocketMQ可以实现分布式事务，别的消息队列是不支持事务消息的，但是也可以通过“最大努力通知”的方案来实现分布式事务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」基于数据库动态配置Spring Cloud Gateway信息</title>
      <link>https://jaswine.com/blog/posts/practice/dynamic_gateway/</link>
      <pubDate>Thu, 30 Jul 2020 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/dynamic_gateway/</guid>
      <description>&lt;p&gt;在使用Spring Cloud Gateway来实现服务网关的时候，官方提供了路由的配置方式，但是不怎么适合我们开发的场景&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「💡探究」使用strace来探究Java I/O在操作系统层面的调用</title>
      <link>https://jaswine.com/blog/posts/explore/strace/</link>
      <pubDate>Thu, 23 Jul 2020 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/explore/strace/</guid>
      <description>&lt;p&gt;我们写的代码最终以一个进程的形式运行在操作系统上，我们的进程要依赖操作系统完成一些工作，此时进程便会进行系统调用，Linux系统下提供strace来查看系统调用信息，以此来查看Java 提供的IO在操作系统层面是什么情况&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」从【重复消费】到【接口幂等】</title>
      <link>https://jaswine.com/blog/posts/summary/idempotent/</link>
      <pubDate>Mon, 06 Jul 2020 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/idempotent/</guid>
      <description>&lt;p&gt;在之前做系统的过程中，出现过一次重复消费的情况。在引入消息队列之后，系统变得越来越复杂，接口设计的幂等性也是重要的考量之一&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」从本地事务到分布式事务</title>
      <link>https://jaswine.com/blog/posts/summary/distributed_trans/</link>
      <pubDate>Sun, 05 Jul 2020 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/distributed_trans/</guid>
      <description>&lt;p&gt;系统变成分布式之后，原来在单个事务中完成的业务分布到多个事务中，维持事务的ACID带来困难，有很多解决分布式事务的解决方案，汇总一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用RocketMQ实现分布式事务</title>
      <link>https://jaswine.com/blog/posts/practice/trans_rocketmq/</link>
      <pubDate>Sun, 05 Jul 2020 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/trans_rocketmq/</guid>
      <description>&lt;p&gt;分布式系统中，消息队列是必不可不少的中间件，实现服务之间的异步调用，分布式系统中存在分布式事务的问题，使用RocketMQ可以实现分布式事务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用线程池</title>
      <link>https://jaswine.com/blog/posts/practice/thread_pool/</link>
      <pubDate>Mon, 15 Jun 2020 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/thread_pool/</guid>
      <description>&lt;p&gt;多线程的支持是Java语言的一个特性，使用多线程可以提高程序的性能&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」计算机世界的I/O</title>
      <link>https://jaswine.com/blog/posts/summary/io/</link>
      <pubDate>Sun, 19 Apr 2020 11:22:54 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/io/</guid>
      <description>&lt;p&gt;&lt;code&gt;IO&lt;/code&gt;是学习编程绕不过的话题，从学习&lt;code&gt;Java&lt;/code&gt;中&lt;code&gt;BIO&lt;/code&gt;到&lt;code&gt;NIO&lt;/code&gt;，再到&lt;code&gt;Nginx&lt;/code&gt;、&lt;code&gt;Redis&lt;/code&gt;、&lt;code&gt;kafka&lt;/code&gt;&amp;hellip;.&lt;code&gt;IO&lt;/code&gt;一直是非常热门的话题&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;❓为什么他们那么快?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🐞DEBUG」记录一次Spring事务不生效的情况</title>
      <link>https://jaswine.com/blog/posts/debug/debug_trans/</link>
      <pubDate>Wed, 15 Apr 2020 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/debug/debug_trans/</guid>
      <description>&lt;p&gt;使用&lt;code&gt;@Transactional&lt;/code&gt;注解就可以很简单的开启一个事务，但是在一次开发中发现事务没有起作用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」Java8与函数式编程</title>
      <link>https://jaswine.com/blog/posts/summary/java8_fun/</link>
      <pubDate>Thu, 19 Mar 2020 11:22:54 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/java8_fun/</guid>
      <description></description>
    </item>
    
    <item>
      <title>「🔨实践」实现接口异常重试机制</title>
      <link>https://jaswine.com/blog/posts/practice/retry/</link>
      <pubDate>Sun, 15 Mar 2020 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/retry/</guid>
      <description>&lt;p&gt;在使用微服务的过程中，系统之间接口相互调用有时候被调用的接口会莫名其妙的报错，有的时候是因为网络的问题，这非常影响系统的可用性，所以希望有接口重试机制&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用Java8中Stream的API</title>
      <link>https://jaswine.com/blog/posts/practice/stream/</link>
      <pubDate>Thu, 05 Dec 2019 11:15:23 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/stream/</guid>
      <description>&lt;p&gt;&lt;code&gt;Java8&lt;/code&gt;中带来全新的&lt;code&gt;Stream API&lt;/code&gt;，提供更加便利的方法来操作集合对象。是对集合对象操作的增强。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[闰年效应]给财务系统带来的影响</title>
      <link>https://jaswine.com/blog/posts/leap_year/</link>
      <pubDate>Tue, 12 Nov 2019 22:44:12 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/leap_year/</guid>
      <description>&lt;p&gt;我们一年是365天或者366天,每一个月是28，29，30或者31天,四年一闰年，每一个闰年就会多出一天，这给财务系统带来了很大的麻烦。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🐞DEBUG」记录一次递归引起的StackOverflowError</title>
      <link>https://jaswine.com/blog/posts/debug/stackoverflow/</link>
      <pubDate>Tue, 15 Oct 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/debug/stackoverflow/</guid>
      <description>&lt;p&gt;&lt;code&gt;StackOverflowError&lt;/code&gt;非常少见，今天在业务代码中的一个俄地柜方法报了突然&lt;code&gt;StackOverflowError&lt;/code&gt;错误。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」随话Java对象GC的事</title>
      <link>https://jaswine.com/blog/posts/summary/gc/</link>
      <pubDate>Mon, 19 Aug 2019 11:22:54 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/gc/</guid>
      <description>&lt;p&gt;&amp;lsquo;Java&amp;rsquo;对象垃圾回收是一个系统的问题，有前后的联系关系，所以要前后串联起来看。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🐞DEBUG」记录一次线上重复消费的问题-接口幂等性</title>
      <link>https://jaswine.com/blog/posts/debug/idempotent/</link>
      <pubDate>Thu, 18 Jul 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/debug/idempotent/</guid>
      <description>&lt;p&gt;在一个项目中，因为硬件机器太烂，网络太烂而导致用户点击消费的时候很长时间没有收到回复，用户再次点击引发了重复消费的问题&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用阿里云的maven打造自己的私服仓库</title>
      <link>https://jaswine.com/blog/posts/practice/ali_maven/</link>
      <pubDate>Mon, 15 Jul 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/ali_maven/</guid>
      <description>&lt;p&gt;&lt;code&gt;Maven&lt;/code&gt;私服是企业开发的基础工具,在阿里云部署一个自己的&lt;code&gt;Maven&lt;/code&gt;私服仓库。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存(Redis)一致性解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_consistency/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_consistency/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，因为数据库和缓存的数据不一致导致数据不对，这样的现象叫做缓存不一致&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存击穿(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_breakdown/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_breakdown/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，由于键的过期导致大量访问落在数据层，这就是缓存击穿&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存穿透(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_penetration/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_penetration/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，遇到恶意访问不存在的数据，导致缓存失效，所有请求都落在数据库层，这在生产环境是不允许的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存雪崩(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_avalanche/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_avalanche/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，因为缓存大面积失效造成大面积的查询落在数据库层，这就是缓存雪崩&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用构建器(Builder)来替代多个构造器</title>
      <link>https://jaswine.com/blog/posts/practice/buider/</link>
      <pubDate>Tue, 19 Mar 2019 10:38:39 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/buider/</guid>
      <description>&lt;p&gt;在写一些通用工具类的时候，通常会有不同的配置，如果使用创痛的方式的话，需要重构多个构造器，使用构建器可以解决这样的问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」使用GeoHash算法来简化GIS点位查询</title>
      <link>https://jaswine.com/blog/posts/practice/geohash/</link>
      <pubDate>Thu, 18 Oct 2018 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/geohash/</guid>
      <description>&lt;p&gt;在项目中有一个需求查询最近的事件点信息，事件点位信息非常多，使用传统计算方式非常的耗时，&lt;code&gt;Google&lt;/code&gt;之后找打GeoHash算法，非常好，记录一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」Bean的概念</title>
      <link>https://jaswine.com/blog/posts/summary/bean/</link>
      <pubDate>Wed, 08 Aug 2018 14:38:54 +0000</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/bean/</guid>
      <description>&lt;p&gt;☕&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「📝总结」跨域(CORS)的解决办法和原理</title>
      <link>https://jaswine.com/blog/posts/summary/cors/</link>
      <pubDate>Mon, 26 Jun 2017 15:51:07 +0000</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/cors/</guid>
      <description>&lt;p&gt;跨域是我们常常遇到的问题&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>