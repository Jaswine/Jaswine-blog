<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Jaswine</title>
    <link>https://jaswine.com/blog/tags/redis/</link>
    <description>Recent content in Redis on Jaswine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 19 Apr 2020 11:22:54 +0800</lastBuildDate>
    
	<atom:link href="https://jaswine.com/blog/tags/redis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>「📝总结」计算机世界的I/O</title>
      <link>https://jaswine.com/blog/posts/summary/io/</link>
      <pubDate>Sun, 19 Apr 2020 11:22:54 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/summary/io/</guid>
      <description>&lt;p&gt;&lt;code&gt;IO&lt;/code&gt;是学习编程绕不过的话题，从学习&lt;code&gt;Java&lt;/code&gt;中&lt;code&gt;BIO&lt;/code&gt;到&lt;code&gt;NIO&lt;/code&gt;，再到&lt;code&gt;Nginx&lt;/code&gt;、&lt;code&gt;Redis&lt;/code&gt;、&lt;code&gt;kafka&lt;/code&gt;....&lt;code&gt;IO&lt;/code&gt;一直是非常热门的话题&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;❓为什么他们那么快?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存(Redis)一致性解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_consistency/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_consistency/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，因为数据库和缓存的数据不一致导致数据不对，这样的现象叫做缓存不一致&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存击穿(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_breakdown/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_breakdown/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，由于键的过期导致大量访问落在数据层，这就是缓存击穿&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存穿透(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_penetration/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_penetration/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，遇到恶意访问不存在的数据，导致缓存失效，所有请求都落在数据库层，这在生产环境是不允许的&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>「🔨实践」缓存雪崩(Redis)解决方案</title>
      <link>https://jaswine.com/blog/posts/practice/cache_avalanche/</link>
      <pubDate>Tue, 02 Apr 2019 14:03:50 +0800</pubDate>
      
      <guid>https://jaswine.com/blog/posts/practice/cache_avalanche/</guid>
      <description>&lt;p&gt;在使用缓存的过程中，因为缓存大面积失效造成大面积的查询落在数据库层，这就是缓存雪崩&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>